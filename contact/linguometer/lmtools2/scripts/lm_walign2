#! /usr/bin/perl
# LTC_S4
# lmtools2 toolchain: step 2
# Creates config/sequence_XXXX.txt files used 
# in LTC_S3 to perform per-sequence word 
# segmentation.

use Getopt::Long;
use File::Copy;
use Cwd;
use Term::ANSIColor;
use Sys::Hostname;

sub mImportFile {
	my $file = $_[0];
	
	open(FID, "< $file") or die "Error ($file): $!\n";
	my @data = <FID>;
	close (FID);

	return @data;
}

# Look for SEQ folders
my $folders_regex = "seq_*";
my @folders_seq_ns = `find . -iname "$folders_regex"`;
my @folders_seq = sort {$a cmp $b} @folders_seq_ns;

# Read configuration files. 
# We need to extract the threshold value from 
# lm_pdetect.cfg. Should be the last one.
my @cfg_pdetect = mImportFile("config/lm_pdetect.cfg");

# Few experiments (7,8,9) do have inveted segmentation peaks.
my @cfg_invert = mImportFile("config/lm_invert.cfg");
my $param_invert = @cfg_invert[0];
chomp($param_invert);

my $lm_cmd = "";
if (int($param_invert)) {
	$lm_cmd = "walign2i";
}
else {
	$lm_cmd = "walign2";
}

# For each SSSS sequence, load the appropriate
# ALS file. It contains the WD/AG peaks that
# walign2 will use to align WD with AG data.
my $file_als_regex = "cache/wd_SSSS_us_sequence.als";

# For each SSSS sequence, load the appropriate
# AG SEQ file.
my $file_ag_regex = "temp/ag_sequence_SSSS.wav";

# Parse each SEQ folder
foreach $folder_seq (@folders_seq) {
	# Nuke the carrier return char
	chomp($folder_seq);
	
	# Look for WD files
	my $word_regex = "wd_*_us.wav";
	my @word_files_ns = `find $folder_seq/ -iname "$word_regex"`; #| grep -v "ag"`;
	my @files_wd = sort {$a cmp $b} @word_files_ns;
		
	# Extract sequence number (SSSS) from each SEQ folder
	$folder_seq =~ /^(.*)(_)(.*)$/;
	$idx_seq = $3;
	
	# Cook the ALS file name
	my $file_als = $file_als_regex;
	$file_als =~ s/SSSS/$idx_seq/g;
	my @params_als = mImportFile($file_als);

	# Cook the AG SEQ file name
	#	my $ag_file = "temp/ag_sequence_$idx_seq.wav";
	my $file_ag = $file_ag_regex;
	$file_ag =~ s/SSSS/$idx_seq/g;
		
	# Extract the WD threshold value from the lm_pdetect.cfg file
	my $param_pdetect = @cfg_pdetect[int($idx_seq)];
	$param_pdetect =~ /^(.*)(\/)(.*)(\/)(.*)(\/)(.*)$/;
	my $thWD = $7;	
		
	# Log file. Cook the name and make it empty.
	my $file_log = "log/lm_walign2_" . $idx_seq . ".log";
	my $cmd_log = `echo "" > $file_log`;
	system($cmd_log);
	
	# Parse each WD file
	foreach $file_wd (@files_wd) {
		chomp($file_wd);
		
		# Extract useful infos from WD filename
		$file_wd =~ /^(.*)(_)(.*)(_us.wav)$/;
		$idx_wd = $3;
	
		
		# Extract AG and WD peaks from the ALS file
		my $param_als = @params_als[int($idx_wd)];
		chomp($param_als);
		$param_als =~ /^(.*)(\/)(.*)(\/)(.*)$/;
		my $pWD = $3;
		my $pAG = $5;
		
		# Cook output files
		my $file_agwt = $folder_seq . "/wd_" . $idx_wd . "_ag_tmp.wav";
		my $file_agwn  = $folder_seq . "/wd_" . $idx_wd . "_ag.wav";
		my $file_aln = $folder_seq . "/wd_" . $idx_wd . "_ag.aln";
		

		# Now I do have enough informations 

		print "Processing WD $idx_wd from SEQ $idx_seq\n";
		print "  AG      $file_ag\n";
		print "  WD      $file_wd\n";
		print "  WD num. $idx_wd\n";
		print "  AGWD    $file_agwt\n";
		print "  ALN     $file_aln\n";
		print "  WD th.  $thWD\n";
		print "  Peak WD $pWD\n";
		print "  Peak AG $pAG\n";
		print "  LOG     $file_log\n";

		my $cmd = "$lm_cmd --sequence $file_ag --wd $file_wd --num $idx_wd --out $file_agwt --aln $file_aln --th 0.60 --pwd $pWD --pag $pAG 1>> $file_log";
		#print "$cmd\n\n";
		system($cmd);
		print "\n";
	
		my @data_aln = mImportFile($file_aln);
		my @params_aln = split("/", @data_aln[0]);
		my $aln_s0 = @params_aln[2];
		my $aln_s1 = @params_aln[3];
		my $aln_ds = int($aln_s1) - int($aln_s0) + 1;
		print "s0=$aln_s0/s1=$aln_s1/ds=$aln_ds\n";
		my $cmd_sox = "sox $file_agwt $file_agwn trim 0s ${aln_ds}s";
		system($cmd_sox);
	}
}
