#!/usr/bin/perl
# Copyright (C) 2007 Michele Tavella <michele@liralab.it>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# LTC_S2
# lmtools2 toolchain: step 2
# Creates config/sequence_XXXX.txt files used 
# in LTC_S3 to perform per-sequence word 
# segmentation.

use Getopt::Long;
use File::Copy;
use Cwd;
use Term::ANSIColor;
use Sys::Hostname;


sub mImportFile
{
	my $file = $_[0];
	
	open(FID, "< $file") or die "Error ($file): $!\n";
	my @data = <FID>;
	close (FID);

	return @data;
}

# Few experiments (7,8,9) do have inveted segmentation peaks.
my @cfg_invert = mImportFile("config/lm_invert.cfg");
my $param_invert = @cfg_invert[0];
chomp($param_invert);

# Read configuration files. 
my $lm_cmd = "";
if (int($param_invert)) {
	$lm_cmd = "pdetect2i";
}
else {
	$lm_cmd = "pdetect2";
}


$file_dv   = "root/US/stream.dv";
$file_seqs = "config/lm_pdetect.cfg";

my @seqs = mImportFile($file_seqs);

foreach $line (@seqs) {
	chomp($line);
    $line =~ /^(.*)(\/)(.*)(\/)(.*)(\/)(.*)$/;
	$txt  = $1;
	$t0   = $3;
	$t1   = $5;
	$th   = $7;
	
	$txtf = sprintf("%.4d", $txt);
	print "Sequence $txt, ";
	print "t0 = $t0, ";
	print "t1 = $t1\n";
	$file_txt = "wd_" . $txtf . "_us_sequence" . ".dd";
	$file_log = "lm_pdetect2_" . $txtf . ".log";
	$file_seg = "wd_" . $txtf . "_us_segment"  . ".wav";
	$file_seq = "wd_" . $txtf . "_us_sequence" . ".wav";
	$file_aln = "wd_" . $txtf . "_us_sequence" . ".alr";
	$file_pks = "wd_" . $txtf . "_us_sequence_peaks" . ".wav";
	$file_als = "wd_" . $txtf . "_us_sequence" . ".als";
	
	$file_txtt = "cache/$file_txt";
	$file_logt = "log/$file_log";
	$file_segt = "cache/$file_seg";
	$file_seqt = "cache/$file_seq";
	$file_alnt = "cache/$file_aln";
	$file_pkst = "cache/$file_pks";
	$file_alst = "cache/$file_als";
	print "  Sequence   $file_txtt\n";
	print "  Log:       $file_logt\n";
	print "  Segment:   $file_segt\n";
	print "  Sequence:  $file_seqt\n";
	print "  ALR:       $file_alnt\n";
	print "  PKS:       $file_pkst\n";
	print "  Threshold: $th\n";
	print "  ALS:       $file_alst\n";
	$cmd = "$lm_cmd --stream $file_dv --t0 $t0 --t1 $t1 --dd $file_txtt --seg $file_segt --seq $file_seqt --pks $file_pkst --alr $file_alnt --th $th --als $file_alst 1> $file_logt";
	#print "$cmd\n";
	system($cmd);
}
