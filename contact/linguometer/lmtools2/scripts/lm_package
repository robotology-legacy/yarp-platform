#!/usr/bin/perl
# Copyright (C) 2007 Michele Tavella <michele@liralab.it>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

use Getopt::Long;
use File::Copy;
use Cwd;
use Term::ANSIColor;
use Sys::Hostname;

sub mImportFile {
	my $file = $_[0];
	
	open(FID, "< $file") or die "Error ($file): $!\n";
	my @data = <FID>;
	close (FID);

	return @data;
}

# Look for SEQ folders
my $folders_regex = "seq_*";
my @folders_seq_ns = `find . -iname "$folders_regex"`;
my @folders_seq = sort {$a cmp $b} @folders_seq_ns;

# Few experiments (7,8,9) do have inveted segmentation peaks.
my @cfg_invert = mImportFile("config/lm_invert.cfg");
my $param_invert = @cfg_invert[0];
chomp($param_invert);
$param_invert = int($param_invert);

# I do need to import the WD file
my $ws_regex = "temp/ws_sequence_SSSS.txt";

# I need to fetch the experiment number
my $exp_pwd = getcwd;
my $exp_idx = $exp_pwd;
$exp_idx =~ /^(.*)(\/exp\_)(.*)$/;
$exp_idx = int($exp_idx);

# Parse each SEQ folder
foreach $folder_seq (@folders_seq) {
	# Nuke the carrier return char
	chomp($folder_seq);
	
	# Extract SEQ folder number
	$folder_seq =~ /^(.*)(_)(.*)$/;
	my $idx_seq = $3;
	my $t_idx_seq = int($idx_seq);

	# Import the WS file
	my $ws_file = $ws_regex;
	$ws_file =~ s/SSSS/$idx_seq/g;
	print "$ws_file\n";
	my @ws_values_t = mImportFile($ws_file);
	my @ws_words = {};
	my @ws_status = {};
	my @ws_id = {};
	my $entry = 0;
	for(my $line_t = 0; $line_t < @ws_values_t; $line_t++) {
		my $buffer = @ws_values_t[$line_t];
		chomp($buffer);
		if(substr($buffer, 0, 1) ne '#') {
			my @array = split(/;/, $buffer);
			@ws_id[$entry] = @array[1];
			@ws_words[$entry] = @array[2];
			@ws_status[$entry] = @array[6];
			$entry++;
		}
	}

	# Look for US-DV files
	my $us_regex = "wd_*_us.dv";
	my @us_files_ns = `find $folder_seq/ -iname "$us_regex" | grep -v "ag"`;
	my @us_files = sort {$a cmp $b} @us_files_ns;
	
	my $words =	@us_files;
	print "Sequence $idx_seq: total $words\n";
		
	# Open a file that works as an index for the mat files
	# This log file contains ONLY the correctly pronounced
	# words (@ws_status[$entry] == 1)
	# Format is:
	#  filename id word experiment sequence word_number 
	# in terms of arrays/vars:
	#  $file_data @ws_id[$entry] @ws_word[$entry] $exp_idx $idx_seq $word
  	# for all entries where the @ws_status[$entry] == 1 condition is
	# verified.
	# The filename implicity contains the word number ($word), but 
	# some redundancy may be helpful (I need to perform some cleaning
  	# onto the var. names).
	my $file_index = sprintf('dist_%.4d/wd_index.txt', $idx_seq);
	open(FILE_INDEX, ">$file_index");
	print FILE_INDEX "#package id txt exp seq num\n";

	for (my $word = 0; $word < $words; $word = $word + 1)
	{
		#print "Processing Word  @ws_words[$word] ---> Status @ws_status[$word]\n";
		print "Processing:\n";
		print "  SEQ     $idx_seq\n";
		print "  WD      $word\n";
		print "  TXT     @ws_words[$word]\n";
		print "  Status  @ws_status[$word]\n";
			

		# Yes, Matlab complains about this (e.g.: 'string' and not
		# "string")
		my $txt = @ws_words[$word];
		#$txt =~ s/'/`/g;
		$txt =~ s/anco'ra/anc[o]ra/g;

		
		my $file_txt = sprintf('seq_%.4d/wd_%.4d.txt', $idx_seq, $word);
		open(FILE_TXT, ">$file_txt");
		print FILE_TXT "#id txt status exp seq num\n";
		#print FILE_TXT "@ws_id[$word] @ws_words[$word] @ws_status[$word] $exp_idx $t_idx_seq $word\n";
		print FILE_TXT "@ws_id[$word] $txt @ws_status[$word] $exp_idx $t_idx_seq $word\n";
		close(FILE_TXT);
		
		if (@ws_status[$word]) {
			my $file_data = sprintf('wd_%.4d.mat', $word);
			print FILE_INDEX "$file_data @ws_id[$word] $txt $exp_idx $t_idx_seq $word\n";
			$file_data = sprintf('dist_%.4d/wd_%.4d.mat', $idx_seq, $word);

			if (-e $file_data) {
				print "File $file_data exists... Skipping packaging operations\n";
			}
			else {
				print "File $file_data needs to be created\n";

				system("matlab -nosplash -nojvm -r \"lmpkgAlignProxy($idx_seq,  $word, \'$file_data\', $param_invert, $exp_idx, \'$txt\');\"");
				#system("matlab -nosplash -nojvm -r \"lmpkgAddInfo(\'$file_data\', $exp_idx, $idx_seq, $word, \'@ws_words[$word]\');\" ");
			}
		}
		else  {
			printf "Word not accepted by the experimenters... Skipping it...\n";
		}
		printf "\n\n";
	}
	close(FILE_INDEX);
}
